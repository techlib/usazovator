#!/usr/bin/python3 -tt

import logging

# Twisted hosts our website and helps with async development.
from twisted.internet import reactor

from twisted.web.server import Site
from twisted.web.wsgi import WSGIResource
from twisted.internet import ssl
from twisted.python import log

# Command line arguments follow the GNU conventions.
from getopt import gnu_getopt
from sys import argv, stderr

# Configuration is stored in a boring ini file.
from configparser import ConfigParser
from collections import OrderedDict

# The application itself also comes in handy... ;-)
from usazovator.site import make_site
from usazovator.manager import Manager
from usazovator.rbac import AccessModel
from usazovator.asset import Asset
from usazovator.wifinator import Wifinator

if __name__ == '__main__':
    def do_start(config):
        # Start Twisted logging to console.
        log.startLogging(stderr)

        # Redirect general logging to the Twisted log as well.
        handler = logging.StreamHandler()
        handler.setLevel(logging.DEBUG)
        logging.root.addHandler(handler)
        logging.root.setLevel(logging.DEBUG)

        # Read role mappings.
        access_model = AccessModel(config.items('access'))

        # AssetWebservice init
        wsdl = config.get('asset', 'wsdl')
        user = config.get('asset', 'user')
        password = config.get('asset', 'password')
        zone_id = config.get('asset', 'zone_id')

        asset = Asset(wsdl, user, password, zone_id)

        # Wifinator
        wifinator = Wifinator(config.get('wifinator', 'url'))

        # Parse zone capacities in order.
        capacity = OrderedDict()
        for zone, value in config.items('capacity'):
            capacity[zone.upper()] = int(value)

        # Prepare manager
        manager = Manager(asset, wifinator, capacity)

        # Prepare the application.
        debug = config.getboolean('http', 'debug')
        app = make_site(manager, access_model)

        # Workaround for RHEL6 Twisted.
        reactor.suggestThreadPoolSize(5)

        # Prepare WSGI resource for the main site.
        site = Site(WSGIResource(reactor, reactor.getThreadPool(), app))

        # Bind the website to it's address.
        host = config.get('http', 'host')
        port = config.getint('http', 'port')
        reactor.listenTCP(port, site, interface=host)

        # Run twisted.
        reactor.run()

    def do_help(*args, **kwargs):
        print('Usage: usazovator [--config=/etc/ntk/usazovator.ini]')
        print('Runs usazovator daemon with given configuration.')
        print('')
        print('OPTIONS:')
        print('  --help, -h          Display this help.')
        print('  --version, -V       Display version info.')
        print('')
        print('  --config, -c file   Load alternative configuration file.')
        print('                      Defaults to /etc/ntk/usazovator.ini.')
        print('')
        print('Report bugs at <http://github.com/techlib/usazovator/>.')

    def do_version(*args, **kwargs):
        print('usazovator (NTK) 1')

    # Parse command line arguments.
    opts, args = gnu_getopt(argv, 'hVc:', ['help', 'version', 'config='])

    action = do_start
    config_path = '/etc/ntk/usazovator.ini'

    for k, v in opts:
        if k in ('--help', '-h'):
            action = do_help
        elif k in ('--version', '-V'):
            action = do_version
        elif k in ('--config', '-c'):
            config_path = v

    if action in (do_start,):
        # Load the configuration from file.
        config = ConfigParser()
        config.read(config_path)

    # Perform the selected action.
    action(config=config)


# vim:set sw=4 ts=4 et:
# -*- coding: utf-8 -*-
